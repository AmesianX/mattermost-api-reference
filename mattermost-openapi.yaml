swagger: '2.0'
info:
  description: >-
    This is the Mattemost API reference.
  version: 3.0.0
  title: Mattermost API Reference
  termsOfService: 'https://about.mattermost.com/default-terms/'
  contact:
    email: feedback@mattermost.com
  x-logo:
    url: "https://www.mattermost.org/wp-content/uploads/2016/03/logoHorizontal_WS.png"
    backgroundColor: "#FFFFFF"
basePath: /api/v3
host: your-mattermost-url.com
tags:
  - name: introduction
    description: Mattermost offers a RESTful Web Service API for interacting with the server. This document acts as a reference for version 3 of that API. For other documentation please see https://docs.mattermost.com.
  - name: schema
    description: All API access is through HTTP(S) requests at `your-mattermost-url.com/api/v3`. All request and response bodies are `application/json`.
  - name: drivers
    description: |
      The easiest way to interact with the Mattermost Web Service API is through a language specific driver. These can be found at the following links:
      
      * [Mattermost JavaScript Driver](https://github.com/mattermost/mattermost-driver-javascript)
      * [Mattermost Golang Driver](https://github.com/mattermost/platform/blob/master/model/client.go)
      
      For an example usage of the Golang driver, please see the [Golang Bot Sample](https://github.com/mattermost/mattermost-bot-sample-golang).
    
  - name: authentication
    description: |
      The majority of the Mattermost API involves interacting with teams. Therefore, most API methods require authentication as a user. There are two ways to authenticate into a Mattermost system.
      
      All examples assume there is a Mattermost instance running at http://localhost:8065.
      
      #### Session Token
      
      Make an HTTP POST to `your-mattermost-url.com/api/v3/users/login` with a JSON body indicating the name of the team, the userâ€™s `login_id`, `password` and optionally the MFA `token`. The `login_id` can be an email, username or an AD/LDAP ID depending on the system's configuration.
      
      ```
      curl -i -d '{"login_id":"someone@nowhere.com","password":"thisisabadpassword"}' http://localhost:8065/api/v3/users/login
      ```
      
      If successful, the response will contain a `Token` header and a user object in the body.
      
      ```
      HTTP/1.1 200 OK
      Set-Cookie: MMSID=hyr5dmb1mbb49c44qmx4whniso; Path=/; Max-Age=2592000; HttpOnly
      Token: hyr5dmb1mbb49c44qmx4whniso
      X-Ratelimit-Limit: 10
      X-Ratelimit-Remaining: 9
      X-Ratelimit-Reset: 1
      X-Request-Id: smda55ckcfy89b6tia58shk5fh
      X-Version-Id: developer
      Date: Fri, 11 Sep 2015 13:21:14 GMT
      Content-Length: 657
      Content-Type: application/json; charset=utf-8
      
      {{user object as json}}
      ```
      
      Include the `Token` as part of the `Authentication` header on your future API requests with the `Bearer` method.
      
      ```
      curl -i -H 'Authorization: Bearer hyr5dmb1mbb49c44qmx4whniso' http://localhost:8065/api/v3/users/me
      ```
      
      You should now be able to access the API as the user you logged in as.
      
      #### OAuth 2.0
      
      Mattermost has the ability to act as an [OAuth 2.0](https://tools.ietf.org/html/rfc6749) service provider.
      
      For an example on how to register an OAuth 2.0 app with your Mattermost instance, please see the [Mattermost-Zapier integration documentation](https://docs.mattermost.com/integrations/zapier.html#register-zapier-as-an-oauth-2-0-application).
      
      Additional documentation on using Mattermost as an OAuth 2.0 service provider will be added here in the future.
  - name: errors
    description: |
      All errors will return an appropriate HTTP response code along with the following JSON body:
      ```
      {
          "id": "the.error.id",
          "message": "Something went wrong", // the reason for the error
          "request_id": "", // the ID of the request
          "status_code": 0, // the HTTP status code
          "is_oauth": false // whether the error is OAuth specific
      }
      ```
  - name: rate limiting
    description: |
      Whenever you make an HTTP request to the Mattermost API you might notice the following headers included in the response:
      ```
      X-Ratelimit-Limit: 10
      X-Ratelimit-Remaining: 9
      X-Ratelimit-Reset: 1441983590
      ```
      
      These headers are telling you your current rate limit status.
      
      | Header | Description |
      | ------ | ----------- |
      | X-Ratelimit-Limit | The maximum number of requests you can make per second. |
      | X-Ratelimit-Remaining | The number of requests remaining in the current window. |
      | X-Ratelimit-Reset | The remaining UTC epoch seconds before the rate limit resets. |
      
      If you exceed your rate limit for a window you will receive the following error in the body of the response:
      
      ```
      HTTP/1.1 429 Too Many Requests
      Date: Tue, 10 Sep 2015 11:20:28 GMT
      X-RateLimit-Limit: 10
      X-RateLimit-Remaining: 0
      X-RateLimit-Reset: 1
      
      limit exceeded
      ```
  - name: users
    description: Anything related to the user data model.
  - name: teams
    description: Anything related to the team data model.
  - name: channels
    description: Anything related to the channel data model.
  - name: posts
    description: Anything related to posts, the main messaging model in Mattermost.
  - name: files
    description: |
      These APIs will change significantly in Mattermost 3.5. This documentation reflects the version that will exist in Mattermost 3.5.

      Anything related to files uploaded by Mattermost users.
  - name: preferences
    description: Anything related to the current user's preferences which are used to store various settings in Mattermost.
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /users/create:
    post:
      tags:
        - users
      summary: Create a new user
      parameters:
        - in: body
          name: body
          description: Abbreviated user object that is to be created
          required: true
          schema:
            type: object
            required:
              - email
              - username
              - password
            properties:
              email:
                type: string
              username:
                type: string
              first_name:
                 type: string
              last_name:
                type: string
              nickname:
                type: string
              password:
                type: string
              locale:
                type: string
              props:
                type: object
      responses:
        '200':
          description: User creation successful
          schema:
            $ref: '#/definitions/User'
            
  /users/me:
    get:
      tags:
        - users
      summary: Get your user object
      description: Returns the user object for the currently logged in user.
      responses:
        '200':
          description: User object retrieval successful
          schema:
            $ref: '#/definitions/User'
  
  /users/login:
    post:
      tags:
        - users
      summary: Login to a user account
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - login_id
              - password
            properties:
              login_id:
                type: string
                description: Username, email, or AD/LDAP ID of a user
              password:
                type: string
                description: User's password
              token:
                type: string
                description: Multi-factor authentication token, if required by the user
              device_id:
                type: string
                description: Mobile device ID, for Android or iOS
              
      responses:
        '200':
          description: User logged in successfuly
          headers:
            token:
              type: string
              description: Access token to be included with future requests
          schema:
            $ref: '#/definitions/User'
  
  /users/logout:
    post:
      tags:
        - users
      summary: Logout of a user account
      responses:
        '200':
          description: User logged out successfuly
          schema:
            properties:
              user_id:
                type: string

  '/users/profiles/{team_id}':
    get:
      tags:
        - users
      summary: Get a list of sanitized user objects by team ID
      parameters:
        - name: team_id
          in: path
          description: Team ID of the users to return
          required: true
          type: string
      responses:
        '200':
          description: Profiles retreived successfully
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
              
  /users/update:
    post:
      tags:
        - users
      summary: Update a user object
      parameters:
        - in: body
          name: body
          description: User object to update with
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: User creation successful
          schema:
            $ref: '#/definitions/User'
            
  /users/update_roles:
    post:
      tags:
        - users
      summary: Update a user's roles
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - user_id
              - roles
            properties:
              user_id:
                type: string
                description: ID of the user to update the roles of
              team_id:
                type: string
                description: ID of the team the user is on
              roles:
                type: string
                description: Space-delimited list of roles to give the user
      responses:
        '200':
          description: User roles updated successful
          schema:
            type: object
            properties:
              user_id:
                type: string
          examples:
            application/json:
              user_id: "string"
  
  /users/update_active:
    post:
      tags:
        - users
      summary: Update whether a user's account is active
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - user_id
              - active
            properties:
              user_id:
                type: string
                description: ID of the user to set active/inactive
              active:
                type: boolean
                description: Use `true` to set the user active, `false` for inactive
      responses:
        '200':
          description: User active status successfully updated
          schema:
            $ref: '#/definitions/User'
  
  /users/update_notify:
    post:
      tags:
        - users
      summary: Update a user's notification properties
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
      responses:
        '200':
          description: User notification properties successfully updated
          schema:
            $ref: '#/definitions/User'
  
  /users/newpassword:
    post:
      tags:
        - users
      summary: Update a user's password
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - user_id
              - current_password
              - new_password
            properties:
              user_id:
                type: string
                description: The ID of the user to change the password for
              current_password:
                type: string
                description: The user's current password
              new_password:
                 type: string
                 description: The user's new password
      responses:
        '200':
          description: User password updated successfully
          schema:
            type: object
            properties:
              user_id:
                type: string
          examples:
            application/json:
              user_id: "string"
  
  /users/send_password_reset:
    post:
      tags:
        - users
      summary: Send a password reset email
      description: Send an email to the user with a link to reset their password. User must use the email/password sign-in method.
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                description: The email of the user to send the reset link to
      responses:
        '200':
          description: Password reset email sent successfully
          schema:
            type: object
            properties:
              email:
                type: string
          examples:
            application/json:
              email: someone@example.com

  '/teams/{team_id}/posts/search':
    post:
      tags:
        - posts
      summary: Search for posts
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - in: body
          name: body
          description: Terms to search for
          required: true
          schema:
            type: object
            required:
              - terms
              - is_or_search
            properties:
              terms:
                type: string
                description: The search terms as inputed by the user.
              is_or_search:
                type: boolean
                description: Set to true if an Or search should be performed vs an And search.
      responses:
        '200':
          description: Search successful with 0-100 results.
          schema:
            $ref: '#/definitions/PostList'

  '/teams/{team_id}/flagged/{offset}/{limit}':
    get:
      tags:
        - posts
      summary: Get all flagged posts for a user
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: offset
          in: path
          description: The page offset, where 0 is the first page.
          required: true
          type: string
        - name: limit
          in: path
          description: The limit of items to return per page.
          required: true
          type: string
      responses:
        '200':
          description: Posts retreived successfully
          schema:
            $ref: "#/definitions/PostList"

  '/teams/{team_id}/channels/{channel_id}/posts/create':
    post:
      tags:
        - posts
      summary: Create a post
      description: Create a post in a channel.
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - in: body
          name: body
          description: The post to create
          required: true
          schema:
            $ref: "#/definitions/Post"
      responses:
        '200':
          description: The newly created Post is returned.
          schema:
            $ref: "#/definitions/Post"

  '/teams/{team_id}/channels/{channel_id}/posts/update':
    post:
      tags:
        - posts
      summary: Update a post
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - in: body
          name: body
          description: The post to create
          required: true
          schema:
            $ref: "#/definitions/Post"
      responses:
        '200':
          description: The updated Post is returned.
          schema:
            $ref: "#/definitions/Post"

  '/teams/{team_id}/channels/{channel_id}/posts/page/{offset}/{limit}':
    get:
      tags:
        - posts
      summary: Get posts for a channel
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - name: offset
          in: path
          description: The page offset, where 0 is the first page.
          required: true
          type: string
        - name: limit
          in: path
          description: The limit of items to return per page.
          required: true
          type: string
      responses:
        '200':
          description: Post retreived successfully
          schema:
            $ref: "#/definitions/PostList"

  '/teams/{team_id}/channels/{channel_id}/posts/since/{time}':
    get:
      tags:
        - posts
      summary: Get posts since a time
      description: Get posts for a channel starting from the time supplied.
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - name: time
          in: path
          description: The liast time to query from.
          required: true
          type: string
      responses:
        '200':
          description: Post retreived successfully
          schema:
            $ref: "#/definitions/PostList"

  '/teams/{team_id}/channels/{channel_id}/posts/{post_id}/get':
    get:
      tags:
        - posts
      summary: Get a post
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - name: post_id
          in: path
          description: The post ID.
          required: true
          type: string
      responses:
        '200':
          description: Post retreived successfully
          schema:
            $ref: "#/definitions/PostList"

  '/teams/{team_id}/channels/{channel_id}/posts/{post_id}/delete':
    post:
      tags:
        - posts
      summary: Deletes a post
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - name: post_id
          in: path
          description: The post ID.
          required: true
          type: string
      responses:
        '200':
          description: The post id that was successfully deleted.
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
                description: The Post ID.

  '/teams/{team_id}/channels/{channel_id}/posts/{post_id}/before/{offset}/{limit}':
    get:
      tags:
        - posts
      summary: Get posts before a post
      description: Get posts before a certian post for a channel.
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - name: post_id
          in: path
          description: The post ID.
          required: true
          type: string
        - name: offset
          in: path
          description: The page offset, where 0 is the first page.
          required: true
          type: string
        - name: limit
          in: path
          description: The limit of items to return per page.
          required: true
          type: string
      responses:
        '200':
          description: Posts retreived successfully
          schema:
            $ref: "#/definitions/PostList"

  '/teams/{team_id}/channels/{channel_id}/posts/{post_id}/after/{offset}/{limit}':
    get:
      tags:
        - posts
      summary: Get posts after a post
      description: Get posts after a certian post for a channel.
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - name: post_id
          in: path
          description: The post ID.
          required: true
          type: string
        - name: offset
          in: path
          description: The page offset, where 0 is the first page.
          required: true
          type: string
        - name: limit
          in: path
          description: The limit of items to return per page.
          required: true
          type: string
      responses:
        '200':
          description: Posts retreived successfully
          schema:
            $ref: "#/definitions/PostList"

  /teams/create:
    post:
      tags:
        - teams
      summary: Create a new team
      parameters:
        - in: body
          name: body
          description: Abbreviated team object that is to be created
          required: true
          schema:
            type: object
            required:
              - name
              - display_name
              - type
            properties:
              name:
                type: string
                description: Unique handler for a team, will be present in the team URL
              display_name:
                type: string
                description: Non-unique UI name for the team
              type:
                type: string
                description: "`'O'` for open, `'I'` for invite only"
      responses:
        '200':
          description: Team creation successful
          schema:
            $ref: '#/definitions/Team'

  /teams/all:
    get:
      tags:
        - teams
      summary: Get all teams
      description: Gets all teams which the current user can has access to. If the user is a System Admin, this will be all teams on the server. Otherwise, it will only be the teams of which the user is a member.
      responses:
        '200':
          description: Teams Found
          schema:
            $ref: '#/definitions/TeamMap'

  '/teams/members/{team_id}':
    get:
      tags:
        - teams
      summary: Get team members
      description: Get all the members of the specified team.
      parameters:
        - name: team_id
          in: path
          description: Team ID of the members to return
          required: true
          type: string
      responses:
        '200':
          description: Members retreived successfully
          schema:
            type: array
            items:
              $ref: "#/definitions/TeamMember"

  '/teams/{team_id}/me':
    get:
      tags:
        - teams
      summary: Get a team object
      parameters:
        - name: team_id
          in: path
          description: Team ID of the team you want to retrieve
          required: true
          type: string
      responses:
        '200':
          description: Team object
          schema:
            $ref: "#/definitions/Team"

  '/teams/{team_id}/update':
    post:
      tags:
        - teams
      summary: Update a team object
      parameters:
        - name: team_id
          in: path
          description: Team ID of the team you want to update
          required: true
          type: string
        - in: body
          name: body
          description: Team object to update with
          required: true
          schema:
            $ref: '#/definitions/Team'
      responses:
        '200':
          description: The updated team object
          schema:
            $ref: "#/definitions/Team"

  '/teams/{team_id}/add_user_to_team':
    post:
      tags:
        - teams
      summary: Add a user to a team
      parameters:
        - name: team_id
          in: path
          description: Team ID of the team you want to add the user too
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - user_id
            properties:
              user_id:
                type: string
                description: The user_id of the user to add to the team.
      responses:
        '200':
          description: User added sucessfully

  '/teams/{team_id}/remove_user_from_team':
    post:
      tags:
        - teams
      summary: Remove a user from a team
      parameters:
        - name: team_id
          in: path
          description: Team ID of the team you want to remove the user from
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - user_id
            properties:
              user_id:
                type: string
                description: The user ID of the user to remove from the team.
      responses:
        '200':
          description: User removed sucessfully

  '/teams/{team_id}/files/upload':
    post:
      tags:
        - files
      summary: Upload a file
      description: Uploads a file that can later be attached to a post.
      parameters:
        - name: team_id
          in: path
          description: The ID of one of the current user's teams
          required: true
          type: string
        - name: files
          in: formData
          description: A file to be uploaded
          required: true
          type: file
        - name: channel_id
          in: formData
          description: The ID of the channel that this file will be uploaded to
          required: true
          type: string
        - name: client_ids
          in: formData
          description: A unique identifier for the file that will be returned in the response
          required: false
          allowEmptyValue: true
          type: string
      responses:
        '200':
          description: A list of all of the current user's preferences
          schema:
            type: object
            properties:
              file_infos:
                description: A list of file metadata that has been stored in the database
                type: array
                items:
                  $ref: '#/definitions/FileInfo'
              client_ids:
                description: A list of the client_ids that were provided in the request
                type: array
                items:
                  type: string
        '400':
          description: Type of the uploaded file doesn't match its file extension or uploaded file is an image that exceeds the maximum dimensions
        '401':
          description: User is not logged in
        '403':
          description: User does not have permission to upload file to the provided team/channel
        '413':
          description: Uploaded file is too large
        '501':
          description: File storage is disabled

  '/teams/{team_id}/channels/create':
    post:
      tags:
        - channels
      summary: Create a channel
      description: Create a new channel for the specified team.
      parameters:
        - in: path
          name: team_id
          description: Team ID to add the channel to
          required: true
          type: string
        - in: body
          name: body
          description: Abbreviated channel object
          required: true
          schema:
            type: object
            required:
              - name
              - display_name
              - type
            properties:
              team_id:
                type: string
                description: The team ID of the channel to create
              name:
                type: string
                description: The unique handle for the channel, will be present in the channel URL
              display_name:
                type: string
                description: The non-unique UI name for the channel
              purpose:
                type: string
                description: A short description of the purpose of the channel
              header:
                type: string
                description: Markdown-formatted text to display in the header of the channel
              type:
                type: string
                description: "'O' for an open channel, 'P' for a private channel"
      responses:
        '200':
          description: Channel created successfully
          schema:
            $ref: '#/definitions/Channel'
        '403':
          description: User does not belong to the team
    
  '/teams/{team_id}/channels/update':
    post:
      tags:
        - channels
      summary: Update a channel
      description: Update a channel for the specified team.
      parameters:
        - in: path
          name: team_id
          description: Team ID of the channel to update
          required: true
          type: string
        - in: body
          name: body
          description: The channel object with updated fields
          required: true
          schema:
            $ref: '#/definitions/Channel'
      responses:
        '200':
          description: Channel updated successfully
          schema:
            $ref: '#/definitions/Channel'
        '403':
          description: User does not belong to the team
      
  '/teams/{team_id}/channels/':
      get:
        tags:
          - channels
        summary: Get channels for the user
        description: Get a list of channels for a team that the logged in user is a part of.
        parameters:
          - name: team_id
            in: path
            description: Team ID of the channels to return
            required: true
            type: string
        responses:
          '200':
            description: The list of channels
            schema:
              $ref: '#/definitions/ChannelList'
          '403':
            description: User does not belong to the team
          '500':
            description: Could not retrieve the user channels

  '/teams/{team_id}/channels/more':
    get:
      tags:
        - channels
      summary: Get channels the user has not joined
      description: Get a list of open channels the user does not belong to by team ID.
      parameters:
        - name: team_id
          in: path
          description: Team ID of the channels to return
          required: true
          type: string
      responses:
        '200':
          description: The list of channels
          schema:
            $ref: '#/definitions/ChannelList'
        '403':
          description: User does not belong to the team
        '500':
          description: Could not retrieve the user channels

  '/teams/{team_id}/channels/{channel_id}':
    get:
      tags:
        - channels
      summary: Get a channel
      description: Get a single channel by team ID and channel ID.
      parameters:
        - name: team_id
          in: path
          description: Team ID the channel belongs to
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID
          required: true
          type: string
      responses:
        '200':
          description: The channel
          schema:
            $ref: '#/definitions/ChannelData'
        '500':
          description: Could not retrieve the channel, the user is not a member of the channel or the channel does not belong to the team

  '/files/{file_id}/get':
    get:
      tags:
        - files
      summary: Get a file
      description: Gets a file that has been uploaded to Mattermost.
      parameters:
        - name: file_id
          in: path
          description: The ID of the file to get
          required: true
          type: string
      responses:
        '200':
          description: The requested file
        '400':
          description: The file is owned by another user and is not attached to a post
        '403':
          description: User does not have permission to view the file
        '404':
          description: The file cannot be found on the file system
        '501':
          description: File storage is disabled

  '/files/{file_id}/get_thumbnail':
    get:
      tags:
        - files
      summary: Get an image thumbnail
      description: Gets a thumbnail image for an image file that has been uploaded to Mattermost.
      parameters:
        - name: file_id
          in: path
          description: The ID of the file thumbnail to get
          required: true
          type: string
      responses:
        '200':
          description: The requested file thumbnail
        '400':
          description: The file is not an image or does not have a thumbnail image or the file is owned by another user and is not attached to a post
        '403':
          description: User does not have permission to view the file
        '404':
          description: The file thumbnail cannot be found on the file system
        '501':
          description: File storage is disabled

  '/files/{file_id}/get_preview':
    get:
      tags:
        - files
      summary: Get an image preview
      description: Gets a preview image for an image file that has been uploaded to Mattermost.
      parameters:
        - name: file_id
          in: path
          description: The ID of the file preview to get
          required: true
          type: string
      responses:
        '200':
          description: The requested file preview
        '400':
          description: The file is not an image or does not have a preview image or the file is owned by another user and is not attached to a post
        '403':
          description: User does not have permission to view the file
        '404':
          description: The file preview cannot be found on the file system
        '501':
          description: File storage is disabled

  '/files/{file_id}/get_info':
    get:
      tags:
        - files
      summary: Get metadata for a file
      description: Gets the stored metadata for a file that has been uploaded to Mattermost.
      parameters:
        - name: file_id
          in: path
          description: The ID of the file info to get
          required: true
          type: string
      responses:
        '200':
          description: The stored metadata for the given file
          schema:
            $ref: "#/definitions/FileInfo"
        '400':
          description: The file is owned by another user and is not attached to a post
        '403':
          description: User does not have permission to view the file
        '501':
          description: File storage is disabled

  '/files/{file_id}/get_public_link':
    get:
      tags:
        - files
      summary: Get a public file link
      description: Gets a public link for a file that can be accessed without logging into Mattermost.
      parameters:
        - name: file_id
          in: path
          description: The ID of the file to get a link for
          required: true
          type: string
      responses:
        '200':
          description: A publicly accessible link to the given file
          schema:
            type: string
        '400':
          description: The file is not attached to a post
        '403':
          description: User does not have permission to view the file
        '501':
          description: Public links are disabled or file storage is disabled

  /preferences/save:
    post:
      tags:
        - preferences
      summary: Save user preferences
      description: Add or update a list of preferences for the current user.
      parameters:
        - name: body
          in: body
          description: A list of preferences to add or update for the current user
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/Preference"
      responses:
        '200':
          description: All of the provided preferences have been successfully saved
        '400':
          description: The request body is invalid
        '401':
          description: User is not logged in
        '403':
          description: One or more of the provided preferences has a user_id that doesn't match the current user

  /preferences/delete:
    post:
      tags:
        - preferences
      summary: Delete user preferences
      description: Delete a list of preferences from the current user.
      parameters:
        - name: body
          in: body
          description: A list of preferences to remove from for the current user
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/Preference"
      responses:
        '200':
          description: All of the provided preferences have been successfully deleted
        '400':
          description: The request body is invalid
        '401':
          description: User is not logged in
        '403':
          description: One or more of the provided preferences has a user_id that doesn't match the current user

  '/preferences/{category}':
    get:
      tags:
        - preferences
      summary: List a user's preferences
      description: Lists the current user's stored preferences in the given category.
      parameters:
        - name: category
          in: path
          description: The category of a group of preferences
          required: true
          type: string
      responses:
        '200':
          description: A list of all of the current user's preferences in the given category
          schema:
            type: array
            items:
              $ref: "#/definitions/Preference"
        '401':
          description: User is not logged in

  '/preferences/{category}/{name}':
    get:
      tags:
        - preferences
      summary: Get a specific user preference
      description: Returns a single preference for the current user with the given category and name.
      parameters:
        - name: category
          in: path
          description: The category of a group of preferences
          required: true
          type: string
        - name: name
          in: path
          description: The name of a preferences
          required: true
          type: string
      responses:
        '200':
          description: A single preference for the current user in the current categorylist of all of the current user's preferences in the given category
          schema:
            type: array
            items:
              $ref: "#/definitions/Preference"
        '401':
          description: User is not logged in
        '500':
          description: No such preference exists for the current user

definitions:
  User:
    type: object
    properties:
      id:
        type: string
      create_at:
        type: integer
      update_at:
        type: integer
      delete_at:
        type: integer
      username:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      nickname:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      password:
        type: string
      auth_data:
        type: string
      auth_service:
        type: string
      roles:
        type: string
      locale:
        type: string
      notify_props:
        type: object
      props:
        type: object
      last_password_update:
        type: integer
      last_picture_update:
        type: integer
      failed_attempts:
        type: integer
      mfa_active:
        type: boolean
      mfa_secret:
        type: string
        
  Team:
    type: object
    properties:
      id:
        type: string
      create_at:
        type: integer
      update_at:
        type: integer
      delete_at:
        type: integer
      display_name:
        type: string
      name:
        type: string
      email:
        type: string
      type:
        type: string
      allowed_domains:
        type: string
      invite_id:
        type: string
      allow_open_invite:
        type: boolean

  Channel:
    type: object
    properties:
      id:
        type: string
      create_at:
        type: integer
      update_at:
        type: integer
      delete_at:
        type: integer
      team_id:
        type: string
      type:
        type: string
      display_name:
        type: string
      name:
        type: string
      header:
        type: string
      purpose:
        type: string
      last_post_at:
        type: integer
      total_msg_count:
        type: integer
      extra_update_at:
        type: integer
      creator_id:
        type: string
    
  ChannelMember:
    type: object
    properties:
      channel_id:
        type: string
      user_id:
        type: string
      roles:
        type: string
      last_viewed_at:
        type: integer
      msg_count:
        type: integer
      mention_count:
        type: integer
      notify_props:
        type: object
      last_update_at:
        type: integer
  
  ChannelList:
    type: object
    properties:
      channels: 
        type: array
        items:
          $ref: '#/definitions/Channel'
      members:
        type: object
        additionalProperties:
          $ref: '#/definitions/ChannelMember'
  
  ChannelData:
    type: object
    properties:
      channel: 
        $ref: '#/definitions/Channel'
      member:
        $ref: '#/definitions/ChannelMember'

  Post:
    type: object
    properties:
      id:
        type: string
      create_at:
        type: integer
      update_at:
        type: integer
      delete_at:
        type: integer
      user_id:
        type: string
      channel_id:
        type: string
      root_id:
        type: string
      parent_id:
        type: string
      original_id:
        type: string
      message:
        type: string
      type:
        type: string
      props:
        type: object
      hashtag:
        type: string
      filenames:
        type: array
        items:
          type: string
      pending_post_id:
        type: string

  PostList:
    type: object
    properties:
      order:
        type: array
        items:
            type: string
        example: ["post_id1", "post_id12"]
      posts:
        type: object
        additionalProperties:
          $ref: '#/definitions/Post'

  TeamMap:
    type: object
    description: A mapping of teamIds to teams.
    properties:
      team_id:
        $ref: '#/definitions/Team'
        
  TeamMember:
    type: object
    properties:
      team_id:
        type: string
      user_id:
        type: string
      roles:
        type: string

  FileInfo:
    type: object
    properties:
      id:
        description: The unique identifier for this file
        type: string
      user_id:
        description: The ID of the user that uploaded this file
        type: string
      post_id:
        description: If this file is attached to a post, the ID of that post
        type: string
      create_at:
        type: integer
      update_at:
        type: integer
      delete_at:
        type: integer
      name:
        description: The name of the file
        type: string
      extension:
        description: The extension at the end of the file name
        type: string
      size:
        description: The size of the file in bytes
        type: integer
      mime_type:
        description: The MIME type of the file
        type: string
      width:
        description: If this file is an image, the width of the file
        type: integer
      height:
        description: If this file is an image, the height of the file
        type: integer
      has_preview_image:
        description: If this file is an image, whether or not it has a preview-sized version
        type: boolean

  Preference:
    type: object
    properties:
      user_id:
        description: The ID of the user that owns this preference
        type: string
      category:
        type: string
      name:
        type: string
      value:
        type: string
          
externalDocs:
  description: Find out more about Mattermost
  url: 'https://about.mattermost.com'

