swagger: '2.0'
info:
  description: >-
    This is the Mattemost API reference.
  version: 3.0.0
  title: Mattermost API Reference
  termsOfService: 'https://about.mattermost.com/default-terms/'
  contact:
    email: feedback@mattermost.com
  x-logo:
    url: "https://www.mattermost.org/wp-content/uploads/2016/03/logoHorizontal_WS.png"
    backgroundColor: "#FFFFFF"
basePath: /api/v3
host: your-mattermost-url.com
tags:
  - name: introduction
    description: Mattermost offers a RESTful Web Service API for interacting with the server. This document acts as a reference for version 3 of that API. For other documentation please see https://docs.mattermost.com.
  - name: schema
    description: All API access is through HTTP(S) requests at `your-mattermost-url.com/api/v3`. All request and response bodies are `application/json`.
  - name: drivers
    description: |
      The easiest way to interact with the Mattermost Web Service API is through a language specific driver. These can be found at the following links:
      
      * [Mattermost JavaScript Driver](https://github.com/mattermost/mattermost-driver-javascript)
      * [Mattermost Golang Driver](https://github.com/mattermost/platform/blob/master/model/client.go)
      
      For an example usage of the Golang driver, please see the [Golang Bot Sample](https://github.com/mattermost/mattermost-bot-sample-golang).
    
  - name: authentication
    description: |
      The majority of the Mattermost API involves interacting with teams. Therefore, most API methods require authentication as a user. There are two ways to authenticate into a Mattermost system.
      
      All examples assume there is a Mattermost instance running at http://localhost:8065.
      
      #### Session Token
      
      Make an HTTP POST to `your-mattermost-url.com/api/v3/users/login` with a JSON body indicating the name of the team, the userâ€™s `login_id`, `password` and optionally the MFA `token`. The `login_id` can be an email, username or an AD/LDAP ID depending on the system's configuration.
      
      ```
      curl -i -d '{"login_id":"someone@nowhere.com","password":"thisisabadpassword"}' http://localhost:8065/api/v3/users/login
      ```
      
      If successful, the response will contain a `Token` header and a user object in the body.
      
      ```
      HTTP/1.1 200 OK
      Set-Cookie: MMSID=hyr5dmb1mbb49c44qmx4whniso; Path=/; Max-Age=2592000; HttpOnly
      Token: hyr5dmb1mbb49c44qmx4whniso
      X-Ratelimit-Limit: 10
      X-Ratelimit-Remaining: 9
      X-Ratelimit-Reset: 1
      X-Request-Id: smda55ckcfy89b6tia58shk5fh
      X-Version-Id: developer
      Date: Fri, 11 Sep 2015 13:21:14 GMT
      Content-Length: 657
      Content-Type: application/json; charset=utf-8
      
      {{user object as json}}
      ```
      
      Include the `Token` as part of the `Authentication` header on your future API requests with the `Bearer` method.
      
      ```
      curl -i -H 'Authorization: Bearer hyr5dmb1mbb49c44qmx4whniso' http://localhost:8065/api/v3/users/me
      ```
      
      You should now be able to access the API as the user you logged in as.
      
      #### OAuth 2.0
      
      Mattermost has the ability to act as an [OAuth 2.0](https://tools.ietf.org/html/rfc6749) service provider.
      
      For an example on how to register an OAuth 2.0 app with your Mattermost instance, please see the [Mattermost-Zapier integration documentation](https://docs.mattermost.com/integrations/zapier.html#register-zapier-as-an-oauth-2-0-application).
      
      Additional documentation on using Mattermost as an OAuth 2.0 service provider will be added here in the future.
  - name: errors
    description: |
      All errors will return an appropriate HTTP response code along with the following JSON body:
      ```
      {
          "id": "the.error.id",
          "message": "Something went wrong", // the reason for the error
          "request_id": "", // the ID of the request
          "status_code": 0, // the HTTP status code
          "is_oauth": false // whether the error is OAuth specific
      }
      ```
  - name: rate limiting
    description: |
      Whenever you make an HTTP request to the Mattermost API you might notice the following headers included in the response:
      ```
      X-Ratelimit-Limit: 10
      X-Ratelimit-Remaining: 9
      X-Ratelimit-Reset: 1441983590
      ```
      
      These headers are telling you your current rate limit status.
      
      | Header | Description |
      | ------ | ----------- |
      | X-Ratelimit-Limit | The maximum number of requests you can make per second. |
      | X-Ratelimit-Remaining | The number of requests remaining in the current window. |
      | X-Ratelimit-Reset | The remaining UTC epoch seconds before the rate limit resets. |
      
      If you exceed your rate limit for a window you will receive the following error in the body of the response:
      
      ```
      HTTP/1.1 429 Too Many Requests
      Date: Tue, 10 Sep 2015 11:20:28 GMT
      X-RateLimit-Limit: 10
      X-RateLimit-Remaining: 0
      X-RateLimit-Reset: 1
      
      limit exceeded
      ```
  - name: users
    description: Anything related to the user data model
  - name: teams
    description: Anything related to the team data model
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /users/create:
    post:
      tags:
        - users
      summary: Create a new user
      parameters:
        - in: body
          name: body
          description: Abbreviated user object that is to be created
          required: true
          schema:
            type: object
            required:
              - email
              - username
              - password
            properties:
              email:
                type: string
              username:
                type: string
              first_name:
                 type: string
              last_name:
                type: string
              nickname:
                type: string
              password:
                type: string
              locale:
                type: string
              props:
                type: object
      responses:
        '200':
          description: User creation successful
          schema:
            $ref: '#/definitions/User'
            
  /users/me:
    get:
      tags:
        - users
      summary: Get your user object
      description: Returns the user object for the currently logged in user.
      responses:
        '200':
          description: User object retrieval successful
          schema:
            $ref: '#/definitions/User'
  
  /users/login:
    post:
      tags:
        - users
      summary: Login to a user account
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - login_id
              - password
            properties:
              login_id:
                type: string
                description: Username, email, or AD/LDAP ID of a user
              password:
                type: string
                description: User's password
              token:
                type: string
                description: Multi-factor authentication token, if required by the user
              device_id:
                type: string
                description: Mobile device ID, for Android or iOS
              
      responses:
        '200':
          description: User logged in successfuly
          headers:
            token:
              type: string
              description: Access token to be included with future requests
          schema:
            $ref: '#/definitions/User'

  '/users/profiles/{team_id}':
    get:
      tags:
        - users
      summary: Get a list of sanitized user objects by team ID
      parameters:
        - name: team_id
          in: path
          description: Team ID of the users to return
          required: true
          type: string
      responses:
        '200':
          description: Profiles retreived successfully
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
              
  /users/update:
    post:
      tags:
        - users
      summary: Update a user object
      parameters:
        - in: body
          name: body
          description: User object to update with
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: User creation successful
          schema:
            $ref: '#/definitions/User'
            
  /users/update_roles:
    post:
      tags:
        - users
      summary: Update a user's roles
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - user_id
              - roles
            properties:
              user_id:
                type: string
                description: ID of the user to update the roles of
              team_id:
                type: string
                description: ID of the team the user is on
              roles:
                type: string
                description: Space-delimited list of roles to give the user
      responses:
        '200':
          description: User roles updated successful
          schema:
            properties:
              user_id:
                type: string
  
  /users/update_active:
    post:
      tags:
        - users
      summary: Update whether a user's account is active
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - user_id
              - active
            properties:
              user_id:
                type: string
                description: ID of the user to set active/inactive
              active:
                type: boolean
                description: Use `true` to set the user active, `false` for inactive
      responses:
        '200':
          description: User active status successfully updated
          schema:
            $ref: '#/definitions/User'
  
  /users/update_notify:
    post:
      tags:
        - users
      summary: Update a user's notification properties
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
      responses:
        '200':
          description: User notification properties successfully updated
          schema:
            $ref: '#/definitions/User'
            
  /teams/create:
    post:
      tags:
        - teams
      summary: Create a new team
      parameters:
        - in: body
          name: body
          description: Abbreviated team object that is to be created
          required: true
          schema:
            type: object
            required:
              - name
              - display_name
              - type
            properties:
              name:
                type: string
                description: Unique handler for a team, will be present in the team URL
              display_name:
                type: string
                description: Non-unique UI name for the team
              type:
                 type: string
                 description: "`'O'` for open, `'I'` for invite only"
      responses:
        '200':
          description: Team creation successful
          schema:
            $ref: '#/definitions/Team'
      
  '/teams/{team_id}/posts/search':
    post:
      tags:
        - posts
      summary: Search for posts.
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - in: body
          name: body
          description: Terms to search for
          required: true
          schema:
            type: object
            required:
              - terms
              - is_or_search
            properties:
              terms:
                type: string
                description: The search terms as inputed by the user.
              is_or_search:
                type: boolean
                description: Set to true if an Or search should be performed vs an And search.
      responses:
        '200':
          description: Search successful with 0-100 results.
          schema:
            $ref: '#/definitions/PostList'
   
  '/teams/{team_id}/flagged/{offset}/{limit}':
    get:
      tags:
        - posts
      summary: Get all flagged posts for a user.
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: offset
          in: path
          description: The page offset, where 0 is the first page.
          required: true
          type: string
        - name: limit
          in: path
          description: The limit of items to return per page.
          required: true
          type: string
      responses:
        '200':
          description: Posts retreived successfully
          schema:
            $ref: "#/definitions/PostList"
            
  '/teams/{team_id}/channels/{channel_id}/posts/create':
    post:
      tags:
        - posts
      summary: Create a post in a channel.
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - in: body
          name: body
          description: The post to create
          required: true
          schema:
            $ref: "#/definitions/Post"
      responses:
        '200':
          description: The newly created Post is returned.
          schema:
            $ref: "#/definitions/Post"
              
  '/teams/{team_id}/channels/{channel_id}/posts/update':
    post:
      tags:
        - posts
      summary: Update a post in a channel.
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - in: body
          name: body
          description: The post to create
          required: true
          schema:
            $ref: "#/definitions/Post"
      responses:
        '200':
          description: The updated Post is returned.
          schema:
            $ref: "#/definitions/Post"
  
  '/teams/{team_id}/channels/{channel_id}/posts/page/{offset}/{limit}':
    get:
      tags:
        - posts
      summary: Get posts for a channel
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - name: offset
          in: path
          description: The page offset, where 0 is the first page.
          required: true
          type: string
        - name: limit
          in: path
          description: The limit of items to return per page.
          required: true
          type: string
      responses:
        '200':
          description: Post retreived successfully
          schema:
            $ref: "#/definitions/PostList"
  
  '/teams/{team_id}/channels/{channel_id}/posts/since/{time}':
    get:
      tags:
        - posts
      summary: Get posts for a channel starting from the time supplied.
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - name: time
          in: path
          description: The liast time to query from.
          required: true
          type: string
      responses:
        '200':
          description: Post retreived successfully
          schema:
            $ref: "#/definitions/PostList"
  
  '/teams/{team_id}/channels/{channel_id}/posts/{post_id}/get':
    get:
      tags:
        - posts
      summary: Get a post by id.
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - name: post_id
          in: path
          description: The post ID.
          required: true
          type: string
      responses:
        '200':
          description: Post retreived successfully
          schema:
            $ref: "#/definitions/PostList"
  
  '/teams/{team_id}/channels/{channel_id}/posts/{post_id}/delete':
    post:
      tags:
        - posts
      summary: Deletes a post in a channel.
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - name: post_id
          in: path
          description: The post ID.
          required: true
          type: string
      responses:
        '200':
          description: The post id that was successfully deleted.
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
                description: The Post ID.
  
  '/teams/{team_id}/channels/{channel_id}/posts/{post_id}/before/{offset}/{limit}':
    get:
      tags:
        - posts
      summary: Get posts before a certian post for a channel.
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - name: post_id
          in: path
          description: The post ID.
          required: true
          type: string
        - name: offset
          in: path
          description: The page offset, where 0 is the first page.
          required: true
          type: string
        - name: limit
          in: path
          description: The limit of items to return per page.
          required: true
          type: string
      responses:
        '200':
          description: Posts retreived successfully
          schema:
            $ref: "#/definitions/PostList"
  
  '/teams/{team_id}/channels/{channel_id}/posts/{post_id}/after/{offset}/{limit}':
    get:
      tags:
        - posts
      summary: Get posts after a certian post for a channel.
      parameters:
        - name: team_id
          in: path
          description: The team ID.
          required: true
          type: string
        - name: channel_id
          in: path
          description: The channel ID.
          required: true
          type: string
        - name: post_id
          in: path
          description: The post ID.
          required: true
          type: string
        - name: offset
          in: path
          description: The page offset, where 0 is the first page.
          required: true
          type: string
        - name: limit
          in: path
          description: The limit of items to return per page.
          required: true
          type: string
      responses:
        '200':
          description: Posts retreived successfully
          schema:
            $ref: "#/definitions/PostList"
  
definitions:
  User:
    type: object
    properties:
      id:
        type: string
      create_at:
        type: integer
      update_at:
        type: integer
      delete_at:
        type: integer
      username:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      nickname:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      password:
        type: string
      auth_data:
        type: string
      auth_service:
        type: string
      roles:
        type: string
      locale:
        type: string
      notify_props:
        type: object
      props:
        type: object
      last_password_update:
        type: integer
      last_picture_update:
        type: integer
      failed_attempts:
        type: integer
      mfa_active:
        type: boolean
      mfa_secret:
        type: string
        
  Team:
    type: object
    properties:
      id:
        type: string
      create_at:
        type: integer
      update_at:
        type: integer
      delete_at:
        type: integer
      display_name:
        type: string
      name:
        type: string
      email:
        type: string
      type:
        type: string
      allowed_domains:
        type: string
      invite_id:
        type: string
      allow_open_invite:
        type: boolean

  Post:
    type: object
    properties:
      id:
        type: string
      create_at:
        type: integer
      update_at:
        type: integer
      delete_at:
        type: integer
      user_id:
        type: string
      channel_id:
        type: string
      root_id:
        type: string
      parent_id:
        type: string
      original_id:
        type: string
      message:
        type: string
      type:
        type: string
      props:
        type: object
      hashtag:
        type: string
      filenames:
        type: array
        items:
          type: string
      pending_post_id:
        type: string

  PostList:
    type: object
    properties:
      order:
        type: array
        items:
            type: string
        example: ["post_id1", "post_id12"]
      posts:
        type: object
        additionalProperties:
          $ref: '#/definitions/Post'
          
externalDocs:
  description: Find out more about Mattermost
  url: 'https://about.mattermost.com'

